import { Resource } from "./Resource.model";
import { isObject } from "../functions";

export enum Authority {
  "user",
  "admin",
  "sysadmin",
  "developer",
}

export class User extends Resource {
  // ACCOUNT INFO
  // ========================================
  email?: string;
  _emailConfirmed?: boolean;
  _password?: string;
  password?: string;
  _passwordUpdated?: Date;
  terms?: boolean;
  _joined?: Date;
  _token?: string;

  // PROFILE
  // ========================================
  // readonly _name?: string;  // generated by API
  username?: string;
  firstName?: string;
  lastName?: string;
  _fullName?: string; // full name as generated by the API
  displayName?: "firstName" | "lastName" | "fullName" | "username" | "id";
  profileImage?: string;
  state?: string;
  zip?: number;
  phoneNumber?: string;
  _phoneConfirmed?: boolean;
  dob?: Date;

  // AUTHORITY
  // ========================================
  authority?: Authority;
  vip?: boolean;
  locked?: boolean;
  _status?: string; // generated by API

  // VIRTUAL VARIABLES
  // ========================================
  // name?: { (): string } = () => {
  //   return this[this.displayName] || this.fullName || this.firstName || "";
  // };

  fullName?: { (): string } = (): string => {
    const name = this.firstName || this.lastName ? this.firstName + " " + this.lastName : null;
    return this._fullName || name || this.username || "";
  };

  // age?: { (): number } = () => {
  //   const timeDiff = Math.abs(Date.now() - this.dob.getTime());
  //   return Math.floor(timeDiff / (1000 * 3600 * 24) / 365.25);
  // };

  // isUser?: { (): boolean } = () => {
  //   return Authority[this.authority] === "user";
  // };

  // isAdmin?: { (): boolean } = () => {
  //   return this.hasAccess(3);
  // };

  // isSysadmin?: { (): boolean } = () => {
  //   return this.hasAccess(4);
  // };

  // CONSTRUCTOR
  // ========================================
  constructor(u: User) {
    super();
    if (u && isObject(u)) Object.assign(this, u);
  }

  // METHODS
  // ========================================
  /** check to see if the user's authority is equal to or greater than required */
  // private hasAccess?: { (requiredAuthLvl: User["authority"]): boolean } = requiredAuthLvl => {
  //   return this.authority >= requiredAuthLvl;
  // };
}
